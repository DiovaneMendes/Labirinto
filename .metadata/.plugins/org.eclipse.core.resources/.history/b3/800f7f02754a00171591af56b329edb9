
package applications;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Random;
import java.util.Scanner;

import com.senac.SimpleJava.Console;
import com.senac.SimpleJava.Graphics.Canvas;
import com.senac.SimpleJava.Graphics.Color;
import com.senac.SimpleJava.Graphics.GraphicApplication;
import com.senac.SimpleJava.Graphics.Point;
import com.senac.SimpleJava.Graphics.Resolution;
import com.senac.SimpleJava.Graphics.Sprite;
import com.senac.SimpleJava.Graphics.events.MouseEvent;
import com.senac.SimpleJava.Graphics.events.MouseObserver;

import controller.EventoDoMouse;
import model.Porta;

public class Principal
	extends GraphicApplication // Para aplicacoes graficas com SimpleJava
	implements MouseObserver // Para responder a eventos de mouse na propria applicacao
{
	//private final Resolution resolution = Resolution.MSX;
	private Point point = null;
	private Point center = null;
	private Point oi = null;
	
	private boolean red = false;
	
	private Porta porta = new Porta();
	Random gerador = new Random();
	private int numberAleatório = gerador.nextInt(31);
	private int teste = 2;
		
	
	@Override
	public void notify(MouseEvent event, int button, Point point) {
		// ajusta posicao final da linha.
		if (event == MouseEvent.CLICK) {
			this.point = point;
		}
		if (event == MouseEvent.DOUBLECLICK) {
			red = ! red;
		}
	}
	//========================================DRAW====================================
	@Override
	protected void draw(Canvas canvas) {
		if (red) {
			canvas.setForeground(Color.RED);
		} else {
			canvas.setForeground(Color.BLACK);
		}
		
		canvas.clear();
		canvas.drawLine(this.center, this.point);
		
	//Criando as salas do jogo
	switch(teste){
		case 1: porta.south().draw(canvas);
				porta.east().draw(canvas);
				int m = getResolution().width/5+20;
				int d =	getResolution().height-160;
				Point oi = new Point(m,d);
				addMouseObserver(MouseEvent.CLICK, new Point(m,d));
				if (MouseEvent.CLICK == oi)
		break;
		case 2: porta.east().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 3: porta.south().draw(canvas);
				porta.east().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 4: porta.south().draw(canvas);
				porta.east().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 5: porta.south().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 6: porta.north().draw(canvas);
				porta.south().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 7: porta.north().draw(canvas);
				porta.east().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 8: porta.north().draw(canvas);
				porta.south().draw(canvas);
				porta.east().draw(canvas);
				porta.up().draw(canvas);
		break;
		case 9: porta.north().draw(canvas);
				porta.south().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 10: porta.north().draw(canvas);
				 porta.south().draw(canvas);
				 porta.east().draw(canvas);
		break;
		case 11: porta.east().draw(canvas);
				 porta.west().draw(canvas);
			 	 porta.up().draw(canvas);
		break;
		case 12: porta.west().draw(canvas);
				 porta.north().draw(canvas);
				 porta.south().draw(canvas);
		break;
		case 13:porta.north().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 14:porta.north().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 15:porta.east().draw(canvas);
				porta.west().draw(canvas);
				porta.up().draw(canvas);
				porta.north().draw(canvas);
		break;
		case 16:porta.east().draw(canvas);
				porta.west().draw(canvas);
		break;
		case 17:porta.west().draw(canvas);
				porta.north().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 18:porta.east().draw(canvas);
				porta.west().draw(canvas);
				porta.up().draw(canvas);
				porta.north().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 19:porta.east().draw(canvas);
				porta.west().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 20:porta.east().draw(canvas);
		break;
		case 21:porta.east().draw(canvas);
		break;
		case 22:porta.east().draw(canvas);
				porta.west().draw(canvas);
				porta.down().draw(canvas);
				porta.north().draw(canvas);
		break;
		case 23:porta.east().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 24:porta.west().draw(canvas);
				porta.down().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 25:porta.east().draw(canvas);
				porta.down().draw(canvas);
				porta.north().draw(canvas);
		break;
		case 26:porta.west().draw(canvas);
				porta.north().draw(canvas);
		break;
		case 27:porta.east().draw(canvas);
		break;
		case 28:porta.east().draw(canvas);
				porta.west().draw(canvas);
				porta.down().draw(canvas);
				porta.north().draw(canvas);
				porta.south().draw(canvas);
		break;
		case 29:porta.west().draw(canvas);
		break;
		case 30:porta.south().draw(canvas);
		break;
		case 31:porta.north().draw(canvas);
		break;
		default:
			Console.println("VOCÊ GANHOU!");
		}
	}

	@Override
	protected void loop() {
		/*
		 * Cria um ponto randomico.
		 * 
		 * int x = (int)(Math.random() * 100):
		 * int y = (int)(Math.random() * 100):
		 * this.point = new Point(x,y);
		 */
		// forca a tela a ser redesenhada.
		redraw();
	}

	@Override
	protected void setup() { 
        /*porta.west();
        porta.east();
		porta.up();
		porta.down();
		porta.north();
		porta.south();*/
      
		// ajusta o numero maximo de vezes por segundo que "loop()" sera executado
		setFramesPerSecond(60);
		// ajusta a resolucao
		setResolution(Resolution.LOWRES);
		int x = getResolution().width / 2;
		int y = getResolution().height / 2;
		System.out.println(x*2 + " " + y*2);
		this.center = new Point(x,y);
		this.point = center;
		
		// adiciona o objeto da aplicacao a lista de observadores de eventos de mouse.
		//addMouseObserver(MouseEvent.CLICK, this);
		//addMouseObserver(MouseEvent.DOUBLECLICK, this);
		
		
		// adiciona um observador de mouse implementando a interface.
		
		/*addMouseObserver(MouseEvent.CLICK, new MouseObserver(){
			int m = getResolution().width/5+20;
			int d =	getResolution().height-160;
			//Point oi = new Point(m,d);

			@Override
			public void notify(MouseEvent e, int b, Point oi) {
				
				teste = gerador.nextInt(31);
				Console.println("Evento de mouse na INTERFACE.");
			}
			
		});*/
		
		// adiciona um observador de mouse com "lambdas" do Java 8.
		addMouseObserver(MouseEvent.DOUBLECLICK,
				(e,b,p)->{
					Console.println("Evento de mouse com LAMBDA");
				});

		// adiciona um observador de mouse utilizando uma classe de objetos.
		addMouseObserver(MouseEvent.CLICK,  new EventoDoMouse());
		
	}
	//=========================================================================================================================================\\
	//Leitura de arquivo txt
		/*public void lendo() throws FileNotFoundException{
				
			//Chama o arquivo txt
			FileReader texto = new FileReader("coordenadas.txt");
			
			//Scanner para ler o arquivo acima e "useDelimiter" 
			//para saber onde o texto deve ter quebra de linha
			Scanner ler = new Scanner(texto).useDelimiter("\n");
			
			//"hasNext" para ler linha por linha
			int i=0;
			while (ler.hasNext()) {
				String nome = ler.next();
				modeloSala[i] = nome;
				i++;
			}
		}
		
		//Criando as salas do jogo
		public void criandoSala(){
			for (int i=0; i<=31; i++){
				if(modeloSala[0].toLowerCase().contains("room 1".toLowerCase())){
					porta.south().draw(canvas);
					porta.east().draw(canvas);
				}
				else if(modeloSala[i].toLowerCase().contains("room 2".toLowerCase())){
					porta.east();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 3".toLowerCase())){
					porta.south();
					porta.east();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 4".toLowerCase())){
					porta.south();
					porta.east();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 5".toLowerCase())){
					porta.south();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 6".toLowerCase())){
					porta.north();
					porta.south();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 7".toLowerCase())){
					porta.north();
					porta.east();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 8".toLowerCase())){
					porta.north();
					porta.south();
					porta.east();
					porta.up();
				}
				else if(modeloSala[i].toLowerCase().contains("room 9".toLowerCase())){
					porta.north();
					porta.south();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 10".toLowerCase())){
					porta.north();
					porta.south();
					porta.east();
				}
				else if(modeloSala[i].toLowerCase().contains("room 11".toLowerCase())){
					porta.east();
					porta.west();
					porta.up();
				}
				else if(modeloSala[i].toLowerCase().contains("room 12".toLowerCase())){
					porta.west();
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 13".toLowerCase())){
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 14".toLowerCase())){
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 15".toLowerCase())){
					porta.east();
					porta.west();
					porta.up();
					porta.north();
				}
				else if(modeloSala[i].toLowerCase().contains("room 16".toLowerCase())){
					porta.east();
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 17".toLowerCase())){
					porta.west();
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 18".toLowerCase())){
					porta.east();
					porta.west();
					porta.up();
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 19".toLowerCase())){
					porta.east();
					porta.west();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 20".toLowerCase())){
					porta.east();
				}
				else if(modeloSala[i].toLowerCase().contains("room 21".toLowerCase())){
					porta.east();
				}
				else if(modeloSala[i].toLowerCase().contains("room 22".toLowerCase())){
					porta.east();
					porta.west();
					porta.down();
					porta.north();
				}
				else if(modeloSala[i].toLowerCase().contains("room 23".toLowerCase())){
					porta.east();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 24".toLowerCase())){
					porta.west();
					porta.down();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 25".toLowerCase())){
					porta.east();
					porta.down();
					porta.north();
				}
				else if(modeloSala[i].toLowerCase().contains("room 26".toLowerCase())){
					porta.west();
					porta.north();
				}
				else if(modeloSala[i].toLowerCase().contains("room 27".toLowerCase())){
					porta.east();
				}
				else if(modeloSala[i].toLowerCase().contains("room 28".toLowerCase())){
					porta.east();
					porta.west();
					porta.down();
					porta.north();
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 29".toLowerCase())){
					porta.west();
				}
				else if(modeloSala[i].toLowerCase().contains("room 30".toLowerCase())){
					porta.south();
				}
				else if(modeloSala[i].toLowerCase().contains("room 31".toLowerCase())){
					porta.north();
				}
			}
		}*/

}