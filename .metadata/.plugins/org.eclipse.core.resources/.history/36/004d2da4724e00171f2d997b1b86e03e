
package applications;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

import com.senac.SimpleJava.Console;
import com.senac.SimpleJava.Graphics.Canvas;
import com.senac.SimpleJava.Graphics.Color;
import com.senac.SimpleJava.Graphics.GraphicApplication;
import com.senac.SimpleJava.Graphics.Point;
import com.senac.SimpleJava.Graphics.Resolution;
import com.senac.SimpleJava.Graphics.events.MouseEvent;
import com.senac.SimpleJava.Graphics.events.MouseObserver;

import controller.EventoDoMouse;

public class Principal
	extends GraphicApplication // Para aplicacoes graficas com SimpleJava
	implements MouseObserver // Para responder a eventos de mouse na propria applicacao
{
	//private final Resolution resolution = Resolution.MSX;
	private Point point = null;
	private Point center = null;
	private Porta porta = new Porta();
	
	Sala sala[] = new Sala [31];
	int cont =1;
	private boolean red = false;
	private Random gerador = new Random();
	private int g = gerador.nextInt(31);
	
	@Override
	public void notify(MouseEvent event, int button, Point point) {
		// ajusta posicao final da linha.
		if (event == MouseEvent.CLICK) {
			this.point = point;
		}
		if (event == MouseEvent.DOUBLECLICK) {
			red = ! red;
		}
	}
	//==============================DRAW====================================
	@Override
	protected void draw(Canvas canvas) {
		canvas.clear();
		
		if (red) {
			canvas.setForeground(Color.RED);
		} else {
			canvas.setForeground(Color.BLACK);
		}
		canvas.drawLine(this.center, this.point);
		

		if(sala[cont].north != "north"){
			//canvas.draw(sala[cont].entradaNorth);
			//sala[cont].entradaNorth.draw();
			porta.north().draw(canvas);
		}
		if(sala[cont].south != "south"){
			porta.south().draw(canvas);
		}
		if(sala[cont].east != "east"){
			porta.east().draw(canvas);
		}
		if(sala[cont].west != "west"){
			porta.west().draw(canvas);
		}
		if(sala[cont].up != "up"){
			porta.up().draw(canvas);	
		}
		if(sala[cont].down != "down"){
			porta.down().draw(canvas);
		}
		
	}
	
	//===============================LOOP====================================
	@Override
	protected void loop() {
		redraw();
	}
	
	//===============================SETUP====================================
	
	@Override
	protected void setup(){
		lendoArquivo();
		
		porta.north();
		porta.south();
		porta.east();
		porta.west();
		porta.up();
		porta.down();
		
		// ajusta o numero maximo de vezes por segundo que "loop()" sera executado
		setFramesPerSecond(60);
		// ajusta a resolucao
		setResolution(Resolution.LOWRES);
		int x = getResolution().width / 2;
		int y = getResolution().height / 2;
		System.out.println(x*2 + " " + y*2);
		this.center = new Point(x,y);
		this.point = center;
		
		addMouseObserver(MouseEvent.CLICK, this);
		
		// adiciona o objeto da aplicacao a lista de observadores de eventos de mouse.
		//addMouseObserver(MouseEvent.CLICK, this);
		//addMouseObserver(MouseEvent.DOUBLECLICK, this);
		
		
		// adiciona um observador de mouse implementando a interface.
		
		/*addMouseObserver(MouseEvent.CLICK, new MouseObserver(){
			int m = getResolution().width/5+20;
			int d =	getResolution().height-160;
			//Point oi = new Point(m,d);

			@Override
			public void notify(MouseEvent e, int b, Point oi) {
				
				teste = gerador.nextInt(31);
				Console.println("Evento de mouse na INTERFACE.");
			}
			
		});*/
		
	}
	//=========================================================================================================================================\\
	
		
		
		
		@SuppressWarnings({ "resource" })
		public void lendoArquivo(){
			String linha[] = new String[31];
			FileReader texto = null;
			Scanner ler = null;
			int j = 0;
			
			try{
				texto = new FileReader("coordenadas.txt");
				ler = new Scanner(texto).useDelimiter("\n");
			}catch (FileNotFoundException e){
				Console.print("");
			}
			
			while (ler.hasNext()) {
				String room = null, north = null, south = null, east = null, west = null, up = null, down = null ;
				
				linha[j] = ler.next();
				String aux[] = linha[j].split(";");
				
				for (int i=0; i<aux.length ; i ++) {
					char [] letras = aux[i].toCharArray();
					
					if (letras[0] == 'r'){	
						aux[i] = aux[i].replace("room ", "");
						room = aux[i];	
					}
					if (letras[0] == 'n'){	
						aux[i] = aux[i].replace("north ", "");
						north = aux[i];	
					}	
					if (letras[0] == 's'){	
						aux[i] = aux[i].replace("south ", "");
						south = aux[i];	
					}
					if (letras[0] == 'e'){	
						aux[i] = aux[i].replace("east ", "");
						east = aux[i];	
					}	
					if (letras[0] == 'w'){	
						aux[i] = aux[i].replace("west ", "");
						west = aux[i];	
					}
					if (letras[0] == 'u'){	
						aux[i] = aux[i].replace("up ", "");
						up = aux[i];	
					}
					if (letras[0] == 'd'){	
						aux[i] = aux[i].replace("down ", "");
						down = aux[i];	
					}	
				}
				sala[j] = new Sala (room, north, south, east, west, up, down);
			j++;
		}
	}
}

